#+title: Config

My literate [[https://github.com/doomemacs/doomemacs][Doom Emacs]] config files.

* Config
:PROPERTIES:
:header-args: :tangle config.el
:END:

** Variables

#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+end_src

** Fonts

Doom exposes five (optional) variables for controlling fonts in Doom:
 - ~doom-font~ -> The primary font to use
 - ~doom-variable-pitch-font~ -> A non-monospace font for non code modes
 - ~doom-big-font~ -> Used for ~doom-big-font-mode~; which is used for presentations and streaming
 - ~doom-unicode-font~ -> For unicode glyphys
 - ~doom-serif-font~ -> For the ~fixed-pitch-serif~ face

#+begin_src emacs-lisp
(setq doom-font (font-spec :family "Fira Code" :size 16)
      doom-variable-pitch-font (font-spec :family "Inter" :size 18))
#+end_src

** Editor

#+begin_src emacs-lisp
(setq user-full-name "Struan Robertson"
      user-mail-address "contact@struanrobertson.co.uk")

(setq doom-theme 'doom-nord)

(setq display-line-numbers-type 'relative)
(remove-hook! 'text-mode-hook
  #'display-line-numbers-mode)

;; Add redo command
(after! undo-fu
  (map! :map undu-fu-mode-map "C-?" #'undu-fu-only-redo))

;; Re-enable auto save and backup files
(setq auto-save-default t
      make-backup-files t)

;; Disable exit confirmation
(setq confirm-kill-emacs nil)

;; Disable massive lsp docs
(setq lsp-ui-doc-enable nil)
#+end_src


** Packages

Whenever re-configuring a package, make sure to wrap the config in an ~after!~ block, otherwise Dooms defaults may override the setting
Exceptions to this rule:
 - Setting file/directory variables (like ~org-directory~)
 - Setting variables which explicitly tell you to set them before their package is loaded
   - See ~C-h v VARIABLE~ to look up their documentation
 - Setting doom variables (which start with ~doom- or +~ )

Some additional functions/macros to configure Doom
 - ~load!~ -> Load external =*.el= files relative to this one
 - ~use-package!~ -> Configure package
 - ~after!~ -> Run code after a package has loaded
 - ~add-load-path!~ -> Add directories to the ~load-path~, relative to this file
   - Emacs searches the ~load-path~ when packages are loaded with ~require~ or ~use-package~
 - ~map!~ for binding new keys

To get information about any of these functions/macros, move the cursor over the highlighted symbol and press ~K~ to open documentation for it, including demos of how they are used.
Alternately, use ~C-h o~ to look up a symbol

~gd~ (or ~C-c c d~ for the Emacs way) can be used to jump to definitions and see how things are implemented

*** Org

#+begin_src emacs-lisp
(setq org-directory "~/Sync/Notes")

(defun my/display-ansi-colors ()
  "Render Jupyter ansi output correctly"
  (ansi-color-apply-on-region (point-min) (point-max)))

(defun my/journal-file-title-setup ()
  "Return the appropriate string for a new journal file."
  (let ((filename (format-time-string "%Y-%m-%d.org")))
    (if (file-exists-p (concat "~/Sync/Notes/daily/" filename))
        "\n* %?" ; If file exists
        "#+TITLE: %<%Y-%m-%d>\n\n* %?" ; If file does not exist
      )))

(defun my/open-journal-today ()
  "Open today's journal file or create it if it doesn't exits."
 "Open today's journal file or create it if it doesn't exist."
  (interactive)
  (let ((journal-dir "/home/struan/Sync/Notes/daily/")
        (today-filename (format-time-string "%Y-%m-%d.org")))
    (let ((full-path (concat journal-dir today-filename)))
      (if (not (file-exists-p full-path))
          (write-region (concat "#+TITLE: " (format-time-string "%Y-%m-%d") "\n\n* ") nil full-path))
        (find-file full-path))))

(after! org

  ;;Appearence
  (custom-set-faces!
    '(org-document-title :height 1.3)
    '(org-level-1 :inherit outline-1 :weight extra-bold :height 1.4)
    '(org-level-2 :inherit outline-2 :weight bold :height 1.15)
    '(org-level-3 :inherit outline-3 :weight bold :height 1.12)
    '(org-level-4 :inherit outline-4 :weight bold :height 1.09)
    '(org-level-5 :inherit outline-5 :weight semi-bold :height 1.06)
    '(org-level-6 :inherit outline-6 :weight semi-bold :height 1.03)
    '(org-level-7 :inherit outline-7 :weight semi-bold)
    '(org-level-8 :inherit outline-8 :weight semi-bold))
  (setq! org-hide-emphasis-markers t
        org-src-fontify-natively t
        org-hide-leading-stars nil
        org-startup-indented nil
        org-startup-folded t
        org-startup-with-latex-preview t
        org-edit-src-content-indentation 0
        org-src-window-setup 'current-window)
  ;; Automatically use mixed pitch mode
  (add-hook 'org-mode-hook 'mixed-pitch-mode)

  ;; Open journal
  (map! :leader
        "nj" #'my/open-journal-today)

  ;; Capture templates
  (setq org-capture-templates
        '(("j" "Journal Entry"
           plain (file (lambda () (concat "/home/struan/Sync/Notes/daily/"
                                          (format-time-string "%Y-%m-%d.org"))))
         (function my/journal-file-title-setup))))

  ;; Global bibliography
  (setq org-cite-global-bibliography '("/home/struan/Sync/Roam/biblio.bib"))

  ;; Jupyter-python settings
  (setq! org-babel-default-header-args:jupyter-python '((:async . "yes")
                                                        (:kernel . "python3")))
  ;; Fix ansi colors returned from Jupyter kernel
  (add-hook 'org-babel-after-execute-hook #'my/display-ansi-colors)

  (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.5))

(defun org-babel-execute:chess (body params)
  "Execute a block of Chess code with org-babel.
This function is called by `org-babel-execute-src-block'."

  (unless (file-exists-p ".chess")
    (make-directory ".chess" t))

  (let* ((output-file (expand-file-name (format "%s.svg" (secure-hash 'sha1 body)) "./.chess"))
         (cmd (format "python ~/.doom.d/bin/elchess.py \"%s\" \"%s\" " body output-file)))
    (message cmd)
    (shell-command cmd)
    (org-babel-result-to-file output-file)))

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((chess . t)))

  (setq org-agenda-files (directory-files-recursively "~/Sync/Notes" "\\.org$"))

  )

;; Org-roam-ui
(use-package! websocket
    :after org-roam)

(use-package! org-roam-ui
    :after org-roam ;; or :after org
;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
;;         a hookable mode anymore, you're advised to pick something yourself
;;         if you don't care about startup time, use
;;  :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))


;; Org export to pdf
(map! :map org-mode-map
         "M-p"  'org-latex-export-to-pdf)

;; Didnt seem to work when coming after citar
(use-package! org-roam
  :after org
  :config (setq org-roam-directory "/home/struan/Sync/Roam")

        ;; https://jethrokuan.github.io/org-roam-guide/
        (setq org-roam-capture-templates
              '(("m" "main" plain "%?"
                :if-new (file+head "main/${slug}.org"
                                   "#+title: ${title}\n")
                :immediate-finish t
                :unnarrowed t)

                ("r" "literature note" plain "%?"
                :if-new (file+head "reference/${title}.org" "#+title: ${title}\n")
                :immediate-finish t
                :unnarrowed t)
                ("n" "literature note (citation)" plain "%?"
                    :if-new (file+head
                    "reference/${citar-citekey}.org"
                    "#+title: ${note-title}\n\n[cite:@${citar-citekey}]")
                    :immediate-finish t
                    :unnarrowed t)))

                (cl-defmethod org-roam-node-type ((node org-roam-node))
                "Return the TYPE of NODE."
                        (condition-case nil
                                (file-name-nondirectory
                                        (directory-file-name
                                                (file-name-directory
                                                        (file-relative-name (org-roam-node-file node) org-roam-directory))))
                                (error "")))

                (setq org-roam-node-display-template
                        (concat "${type:15} ${title:*} " (propertize "${tags:10}" 'face 'org-tag))))

;; Citar config
(use-package! citar
  :after org
  :config (setq
           citar-bibliography '("/home/struan/Sync/Roam/biblio.bib")
           citar-notes-path '("/home/struan/Sync/Roam/reference/")))

;; Org-roam config

(use-package! citar-org-roam
  :after citar org-roam
  :config (citar-org-roam-mode
           (setq citar-org-roam-note-title-template "${title}"
                 citar-org-roam-capture-template-key "n")))

;; Automatically enter fragtog mode
(use-package! org-fragtog
  :after org
  :hook (org-mode . org-fragtog-mode)
  )

;; Automatically enter appear mode
(use-package! org-appear
  :after org
  :hook (org-mode . org-appear-mode)
  :config (setq
           org-appear-autolinks nil
           org-appear-autoentities t
           org-appear-autosubmarkers t ))

#+end_src

*** Avy

Used for jumping around the buffer

#+begin_src emacs-lisp
;; Use avy to navigate through all open windows
(setq avy-all-windows t)

;; Replace goto-line with avy-goto-line as it is more flexible and can use numbers anyway
(map! "M-g g" #'avy-goto-line)

;;Unmap evil keys
(map! :after evil
      :map evil-scroll-page-down
      "C-f" nil)
;; Avy goto char
(map!
 "C-f" #'avy-goto-char-2
 :nv "C-f" #'avy-goto-char-2)
#+end_src

*** Julia

#+begin_src emacs-lisp
(setq lsp-julia-package-dir nil)
(setq lsp-julia-flags `("-J/home/struan/languageserver.so"))
#+end_src


* Init
:PROPERTIES:
:header-args: :tangle init.el
:END:

#+begin_src emacs-lisp
;;; ~/.doom.d/init.el -*- lexical-binding: t; -*-

(doom! :input
       ;;bidi              ; (tfel ot) thgir etirw uoy gnipleh
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row

       :completion
       (company +childframe)           ; the ultimate code completion backend
       ;;helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       ;;ivy               ; a search engine for love and life
       vertico           ; the search engine of the future

       :ui
       ;;deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       ;;doom-quit         ; DOOM quit-message prompts when you quit Emacs
       (emoji +unicode)  ; 🙂
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       ;;hydra
       ;;indent-guides     ; highlighted indent columns
       ligatures         ; ligatures and symbols to make your code pretty again
       ;;minimap           ; show a map of the code on the side
       modeline          ; snazzy, Atom-inspired modeline, plus API
       ;;nav-flash         ; blink cursor line after big motions
       ;;neotree           ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on
       (popup +defaults)   ; tame sudden yet inevitable temporary windows
       ;;tabs              ; a tab bar for Emacs
       ;;treemacs          ; a project drawer, like neotree but cooler
       ;;unicode           ; extended unicode support for various languages
       (vc-gutter +pretty) ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       window-select     ; visually switch windows
       ;;workspaces        ; tab emulation, persistence & separate workspaces
       zen               ; distraction-free coding or writing

       :editor
       (evil +everywhere); come to the dark side, we have cookies
       file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       ;;format  ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       ;;multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       ;;rotate-text       ; cycle region at point between text candidates
       snippets          ; my elves. They type so I don't have to
       word-wrap         ; soft wrapping with language-aware indent

       :emacs
       dired             ; making dired pretty [functional]
       electric          ; smarter, keyword-based electric-indent
       ibuffer         ; interactive buffer management
       undo              ; persistent, smarter undo for your inevitable mistakes
       vc                ; version-control and Emacs, sitting in a tree

       :term
       eshell            ; the elisp shell that works everywhere
       ;;shell             ; simple shell REPL for Emacs
       ;;term              ; basic terminal emulator for Emacs
       vterm             ; the best terminal emulation in Emacs

       :checkers
       syntax              ; tasing you for every semicolon you forget
       (spell +aspell) ; tasing you for misspelling mispelling
       ;; grammar           ; tasing grammar mistake every you make

       :tools
       ;;ansible
       (biblio :completion vertico)          ; Writes a PhD for you (citation needed)
       debugger          ; FIXME stepping through code, to help you add bugs
       ;;direnv
       docker
       ;;editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       ;;gist              ; interacting with github gists
       lookup              ; navigate your code and its documentation
       lsp               ; M-x vscode
       magit             ; a git porcelain for Emacs
       ;;make              ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       rgb               ; creating color strings
       ;;taskrunner        ; taskrunner for all your projects
       ;;terraform         ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       tree-sitter       ; syntax and parsing, sitting in a tree...
       ;;upload            ; map local to remote projects via ssh/ftp

       :os
       ;;(:if IS-MAC macos)  ; improve compatibility with macOS
       tty               ; improve the terminal Emacs experience

       :lang
       ;;agda              ; types of types of types of types...
       ;;beancount         ; mind the GAAP
       ;;(cc +lsp)         ; C > C++ == 1
       ;;clojure           ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       ;;data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       ;;dhall
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp        ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;factor
       ;;faust             ; dsp, but you get to keep your soul
       ;;fortran           ; in FORTRAN, GOD is REAL (unless declared INTEGER)
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       ;;(go +lsp)         ; the hipster dialect
       ;;(graphql +lsp)    ; Give queries a REST
       ;;(haskell +lsp)    ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       json              ; At least it ain't XML
       ;;(java +lsp)       ; the poster child for carpal tunnel syndrome
       javascript        ; all(hope(abandon(ye(who(enter(here))))))
       (julia +lsp)             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       latex             ; writing papers in Emacs has never been so fun
       ;;lean              ; for folks with too much to prove
       ;;ledger            ; be audit you can be
       lua               ; one-based indices? one-based indices
       markdown          ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       (org +jupyter +roam2 +dragndrop)               ; organize your plain life in plain text
       ;;php               ; perl's insecure younger brother
       ;;plantuml          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       (python +lsp +pyright +poetry +tree-sitter)            ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       ;;rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       (rust +lsp)       ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       scala             ; java, but good
       ;;(scheme +guile)   ; a fully conniving family of lisps
       sh                ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       web               ; the tubes
       yaml              ; JSON, but readable
       ;;zig               ; C, but simpler

       :email
       ;;(mu4e +org +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       ;;calendar
       ;;emms
       ;;everywhere        ; *leave* Emacs!? You must be joking
       ;;irc               ; how neckbeards socialize
       ;;(rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :config
       ;;literate
       (default +bindings +smartparens))
#+end_src


* Packages
:PROPERTIES:
:header-args: :tangle packages.el
:END:

To install a package with Doom you must declare them here and run ~doom sync~ *on the command line*, then restart Emacs for the changes to take effect, or use ~M-x doom/reload~

To install =some-package= from MELPA, ELPA or emacsmirror use ~(package! some-package)~

To install a package directly from a remote git repo, you must specify a ~:recipe~. You'll find documentation on what ~:recipe~ accepts [[https://github.com/radian-software/straight.el#the-recipe-format][here]]
~(package! another-package
    :recipe (:host github.com :repo "username/repo"))~

If the package you are trying to install does not contain a =PACKAGENAME.el= file, or is located in a subdirectory of the repo, you'll need to specify ~:files~ in the ~:recipe~
~package! this=package
  :recipe (:host github :repo "username/repo :files ("some-file.el" "src/lisp/*.el")))~

 If you'd like to disable a package included with Doom, you can do so with the ~:disable~ property
 ~(package! builtin-package :disable t)~

 You can override the recipe of a built in package without having to specify all of the properties for ~:recipe~. These will inherit the rest of its recipe from Doom or MELPA/ELPA/Emacsmirror
 ~(package! builtin-package :recipe (:nonrecursive t))~
 ~(package! builtin-package-2 :recipe (:repo "myfork/package"))~

 Specify a ~:branch~ to install a package from a particular branch or tag. This is required for some packages whose default branch isn't =master=
 ~(package! builtin-package :pin "1a2b3c4d5e")~

 Doom's packages are pinned to allow a specific commit and updated from release to release. The ~unpin!~ macro allows you to unpin single packages
 ~(unpin! pinned-package another-pinned-package)~

#+begin_src emacs-lisp
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el

;; Use jupyter-kernel in Org babel source blocks
(package! jupyter)

;; Unpin org-roam for use with org-roam-ui
(unpin! org-roam)

;; UI for visualising org-roam
(package! org-roam-ui)

;; Automatic toggling of LaTeX fragments
(package! org-fragtog)

;; Automaticaly toggle hiding emphesis markers
(package! org-appear)

;; Integrate citar with org-roam
(package! citar-org-roam)

;; Yuck mode for editing eww files
(package! yuck-mode)

;; Grammarly LSP
(package! lsp-grammarly)

;; Just mode syntax highlighting
(package! just-mode)
#+end_src


* Auto Tangle
;; Local Variables:
;; eval: (add-hook 'after-save-hook (lambda ()(if (y-or-n-p "Tangle?")(org-babel-tangle))) nil t)
;; End:
